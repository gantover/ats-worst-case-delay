[General]
network = dtu_networks.ring_3sw_network
sim-time-limit = 1.0s

# enable multiple canvas visualizers
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"

# network route activity visualization
*.visualizer.numNetworkRouteVisualizers = 3
*.visualizer.networkRouteVisualizer[*].displayRoutes = true
*.visualizer.networkRouteVisualizer[0].packetFilter = "\"Isochronous*\""
*.visualizer.networkRouteVisualizer[0].lineColor = "red1"
*.visualizer.networkRouteVisualizer[1].packetFilter = "\"Cyclic*\""
*.visualizer.networkRouteVisualizer[1].lineColor = "blue4"
*.visualizer.networkRouteVisualizer[2].packetFilter = "\"Video_Audio_Voice*\""
*.visualizer.networkRouteVisualizer[2].lineColor = "green1"


*.*.eth[*].bitrate = 1Gbps

# packet processing delay
*.*.bridging.directionReverser.delayer.typename = "PacketDelayer"
*.*.bridging.directionReverser.delayer.delay = 8us


*.node_0_0.numApps = 2

*.node_0_1.numApps = 2

*.node_1_0.numApps = 2

*.node_2_0.numApps = 2

*.node_0_0.app[0..1].typename = "UdpSourceApp"

*.node_0_0.app[0].display-name = "Isochronous"
*.node_0_0.app[0].io.destAddress = "node_1_0"
*.node_0_0.app[0].io.destPort = 1
*.node_0_0.app[0].source.productionInterval = 100us
*.node_0_0.app[0].source.initialProductionOffset = 100us
*.node_0_0.app[0].source.packetLength = 86B

*.node_0_0.app[1].display-name = "Video_Audio_Voice"
*.node_0_0.app[1].io.destAddress = "node_2_0"
*.node_0_0.app[1].io.destPort = 3
*.node_0_0.app[1].source.productionInterval = 10000us
*.node_0_0.app[1].source.initialProductionOffset = 10000us
*.node_0_0.app[1].source.packetLength = 1239B



*.node_0_1.app[0..1].typename = "UdpSourceApp"

*.node_0_1.app[0].display-name = "Isochronous"
*.node_0_1.app[0].io.destAddress = "node_2_0"
*.node_0_1.app[0].io.destPort = 1
*.node_0_1.app[0].source.productionInterval = 1000us
*.node_0_1.app[0].source.initialProductionOffset = 1000us
*.node_0_1.app[0].source.packetLength = 86B

*.node_0_1.app[1].display-name = "Cyclic"
*.node_0_1.app[1].io.destAddress = "node_1_0"
*.node_0_1.app[1].io.destPort = 2
*.node_0_1.app[1].source.productionInterval = 4000us
*.node_0_1.app[1].source.initialProductionOffset = 4000us
*.node_0_1.app[1].source.packetLength = 944B


*.node_1_0.app[0..1].typename = "UdpSinkApp"
*.node_1_0.app[0].io.localPort = 1
*.node_1_0.app[1].io.localPort = 2

*.node_2_0.app[0..1].typename = "UdpSinkApp"
*.node_2_0.app[0].io.localPort = 1
*.node_2_0.app[1].io.localPort = 3

*.node*.hasUdp = firstAvailableOrEmpty("Udp") != ""


# steering stream identification and coding
*.node*.bridging.streamIdentifier.identifier.mapping = [
    {stream: "Isochronous", packetFilter: expr(udp.destPort == 1)},
    {stream: "Cyclic", packetFilter: expr(udp.destPort == 2)},
	{stream: "Video_Audio_Voice", packetFilter: expr(udp.destPort == 3)}]

# traffic configuration
*.*.eth[*].macLayer.queue.numTrafficClasses = 3
*.*.eth[*].macLayer.queue.numQueues = 3
*.*.eth[*].macLayer.queue.*[0].display-name = "Isochronous"
*.*.eth[*].macLayer.queue.*[1].display-name = "Cyclic"
*.*.eth[*].macLayer.queue.*[2].display-name = "Video_Audio_Voice"


# client stream encoding
*.*.bridging.streamCoder.encoder.mapping = [{stream: "Isochronous", pcp: 6}, {stream: "Cyclic", pcp: 5}, {stream: "Video_Audio_Voice", pcp: 1}]


# enable streams
*.*.hasIncomingStreams = true
*.*.hasOutgoingStreams = true


# stream coder mappings for switches
*.sw*.bridging.streamCoder.encoder.mapping = [{stream: "Isochronous", pcp: 6}, {stream: "Cyclic", pcp: 5}, {stream: "Video_Audio_Voice", pcp: 1}]
*.sw*.bridging.streamCoder.decoder.mapping = [{stream: "Isochronous", pcp: 6}, {stream: "Cyclic", pcp: 5}, {stream: "Video_Audio_Voice", pcp: 1}]
*.sw*.eth[*].macLayer.queue.classifier.mapping = [[0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 1], [0, 0, 0], [0, 1, 2]]

# enable ingress per-stream filtering
*.sw*.hasIngressTrafficFiltering = true


# enable egress traffic shaping
*.*.hasEgressTrafficShaping = true


# asynchronous shaper traffic metering
*.sw*.bridging.streamFilter.ingress.numStreams = 3
*.sw*.bridging.streamFilter.ingress.classifier.mapping = { "Isochronous": 0, "Cyclic": 1, "Video_Audio_Voice": 2 }
*.sw*.bridging.streamFilter.ingress.*[0].display-name = "Isochronous"
*.sw*.bridging.streamFilter.ingress.*[1].display-name = "Cyclic"
*.sw*.bridging.streamFilter.ingress.*[2].display-name = "Video_Audio_Voice"
*.sw*.bridging.streamFilter.ingress.meter[*].typename = "EligibilityTimeMeter"
*.sw*.bridging.streamFilter.ingress.filter[*].typename = "EligibilityTimeFilter"

*.sw*.bridging.streamFilter.ingress.meter[0].committedInformationRate = 10Mbps
*.sw*.bridging.streamFilter.ingress.meter[0].committedBurstSize = 500B
*.sw*.bridging.streamFilter.ingress.meter[1].committedInformationRate = 10Mbps
*.sw*.bridging.streamFilter.ingress.meter[1].committedBurstSize = 5000B
*.sw*.bridging.streamFilter.ingress.meter[2].committedInformationRate = 10Mbps
*.sw*.bridging.streamFilter.ingress.meter[2].committedBurstSize = 5000B

# asynchronous traffic shaping
*.sw*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[*].typename = "Ieee8021qAsynchronousShaper"


